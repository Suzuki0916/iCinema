"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var path_1 = require("path");
var Debug = require("debug");
var debug = Debug('node-env-run');
function getScriptToExecute(script, cwd) {
    if (script === '.') {
        debug('Evalute package.json to determine script to execute.');
        var pathToPkg = path_1.resolve(cwd, 'package.json');
        if (!fs.existsSync(pathToPkg)) {
            debug('could not find package.json');
            return null;
        }
        var pkg = require(pathToPkg);
        if (!pkg.main) {
            console.error('Could not find a "main" entry in the package.json');
            return null;
        }
        script = path_1.resolve(cwd, pkg.main);
    }
    else {
        script = path_1.resolve(cwd, script);
    }
    return script;
}
exports.getScriptToExecute = getScriptToExecute;
function setEnvironmentVariables(readValues, force) {
    if (force === void 0) { force = false; }
    if (force) {
        debug('Force overriding enabled');
    }
    var envKeysToSet = Object.keys(readValues).filter(function (key) {
        if (force && typeof readValues[key] !== 'undefined') {
            if (typeof readValues[key] === 'string' && readValues[key].length === 0) {
                debug("Not overriding " + key);
                return false;
            }
            debug("Overriding " + key);
            return true;
        }
        return !process.env[key];
    });
    envKeysToSet.forEach(function (key) {
        process.env[key] = readValues[key];
    });
    debug("Set the env variables: " + envKeysToSet.map(function (k) { return "\"" + k + "\""; }).join(','));
}
exports.setEnvironmentVariables = setEnvironmentVariables;
function constructNewArgv(currentArgv, script, newArguments) {
    var node = currentArgv[0];
    return [node, script].concat(newArguments.split(' '));
}
exports.constructNewArgv = constructNewArgv;

{"ast":null,"code":"export default function mapNodesToColumns() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$children = _ref.children,\n      children = _ref$children === undefined ? [] : _ref$children,\n      _ref$columns = _ref.columns,\n      columns = _ref$columns === undefined ? 1 : _ref$columns,\n      _ref$dimensions = _ref.dimensions,\n      dimensions = _ref$dimensions === undefined ? [] : _ref$dimensions;\n\n  var nodes = [];\n  var heights = [];\n\n  if (columns === 1) {\n    return children;\n  } // use dimensions to calculate the best column for each child\n\n\n  if (dimensions.length && dimensions.length === children.length) {\n    for (var i = 0; i < columns; i++) {\n      nodes[i] = [];\n      heights[i] = 0;\n    }\n\n    children.forEach(function (child, i) {\n      var _dimensions$i = dimensions[i],\n          width = _dimensions$i.width,\n          height = _dimensions$i.height;\n      var index = heights.indexOf(Math.min.apply(Math, heights));\n      nodes[index].push(child);\n      heights[index] += height / width;\n    });\n  } // equally spread the children across the columns\n  else {\n      var _loop = function _loop(_i) {\n        nodes[_i] = children.filter(function (child, j) {\n          return j % columns === _i;\n        });\n      };\n\n      for (var _i = 0; _i < columns; _i++) {\n        _loop(_i);\n      }\n    }\n\n  return nodes;\n}","map":null,"metadata":{},"sourceType":"module"}
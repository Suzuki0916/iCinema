{"ast":null,"code":"var _jsxFileName = \"/Users/miladarif/Desktop/React/movie-app/src/components/common/search.jsx\";\nimport React from 'react';\nimport StringSimilarity from 'string-similarity';\nexport var SearchBar = function SearchBar(_ref) {\n  var onSearch = _ref.onSearch,\n      name = _ref.name;\n  return React.createElement(\"div\", {\n    className: \"active-cyan-3 active-cyan-4 mb-4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    className: \"form-control\",\n    name: name,\n    onChange: onSearch,\n    type: \"text\",\n    placeholder: \"Search\",\n    \"aria-label\": \"Search\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }));\n};\nexport function SearchItem(item, Items, filterBy) {\n  var similarityPercent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.1;\n  var filteredString = [];\n  Items.forEach(function (element) {\n    filteredString.push(element[filterBy]);\n  });\n  var filteredItems = StringSimilarity.findBestMatch(item, filteredString);\n  /* Arranging filtered items by best rating */\n\n  filteredItems = filteredItems.ratings.sort(function (a, b) {\n    if (a.rating > b.rating) return -1;else return 1;\n  });\n  /* Removing low ratings from the list */\n\n  var closestMatchest = [];\n  filteredItems.forEach(function (element) {\n    if (element.rating >= similarityPercent) closestMatchest.push(element);\n  });\n  console.log(closestMatchest); // var innerJoin = closestMatchest.filter(element.taget => Items.includes(element));\n\n  return Items;\n}","map":{"version":3,"sources":["/Users/miladarif/Desktop/React/movie-app/src/components/common/search.jsx"],"names":["React","StringSimilarity","SearchBar","onSearch","name","SearchItem","item","Items","filterBy","similarityPercent","filteredString","forEach","element","push","filteredItems","findBestMatch","ratings","sort","a","b","rating","closestMatchest","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,gBAAP,MAA6B,mBAA7B;AAGA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,OAAwB;AAAA,MAArBC,QAAqB,QAArBA,QAAqB;AAAA,MAAXC,IAAW,QAAXA,IAAW;AAC7C,SACI;AAAK,IAAA,SAAS,EAAC,kCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AACI,IAAA,SAAS,EAAC,cADd;AAEI,IAAA,IAAI,EAAEA,IAFV;AAGI,IAAA,QAAQ,EAAED,QAHd;AAII,IAAA,IAAI,EAAC,MAJT;AAKI,IAAA,WAAW,EAAC,QALhB;AAMI,kBAAW,QANf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAYH,CAbM;AAeP,OAAO,SAASE,UAAT,CAAqBC,IAArB,EAA2BC,KAA3B,EAAkCC,QAAlC,EACP;AAAA,MADmDC,iBACnD,uEADuE,GACvE;AACI,MAAIC,cAAc,GAAG,EAArB;AACAH,EAAAA,KAAK,CAACI,OAAN,CAAc,UAAAC,OAAO,EAAI;AACrBF,IAAAA,cAAc,CAACG,IAAf,CAAoBD,OAAO,CAACJ,QAAD,CAA3B;AACH,GAFD;AAIA,MAAIM,aAAa,GAAGb,gBAAgB,CAACc,aAAjB,CAA+BT,IAA/B,EAAqCI,cAArC,CAApB;AAEA;;AACAI,EAAAA,aAAa,GAAGA,aAAa,CAACE,OAAd,CAAsBC,IAAtB,CAA2B,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACjD,QAAGD,CAAC,CAACE,MAAF,GAAWD,CAAC,CAACC,MAAhB,EACI,OAAO,CAAC,CAAR,CADJ,KAGI,OAAO,CAAP;AACH,GALW,CAAhB;AAQA;;AACA,MAAIC,eAAe,GAAG,EAAtB;AACAP,EAAAA,aAAa,CAACH,OAAd,CAAsB,UAAAC,OAAO,EAC7B;AACI,QAAGA,OAAO,CAACQ,MAAR,IAAkBX,iBAArB,EACIY,eAAe,CAACR,IAAhB,CAAqBD,OAArB;AACP,GAJD;AAKAU,EAAAA,OAAO,CAACC,GAAR,CAAYF,eAAZ,EAxBJ,CA2BI;;AACA,SAAOd,KAAP;AACH","sourcesContent":["import React from 'react'\nimport StringSimilarity from 'string-similarity'; \n\n\nexport const SearchBar = ( {onSearch, name} ) => {\n    return (\n        <div className=\"active-cyan-3 active-cyan-4 mb-4\">\n            <input \n                className=\"form-control\" \n                name={name}\n                onChange={onSearch}\n                type=\"text\" \n                placeholder=\"Search\" \n                aria-label=\"Search\"\n            />\n        </div>\n    )\n}\n \nexport function SearchItem (item, Items, filterBy, similarityPercent = 0.1) \n{\n    let filteredString = [];\n    Items.forEach(element => {\n        filteredString.push(element[filterBy])\n    });\n\n    let filteredItems = StringSimilarity.findBestMatch(item, filteredString)\n\n    /* Arranging filtered items by best rating */\n    filteredItems = filteredItems.ratings.sort((a, b) => {\n        if(a.rating > b.rating) \n            return -1\n        else \n            return 1\n        }\n    )\n\n    /* Removing low ratings from the list */\n    let closestMatchest = [];\n    filteredItems.forEach(element =>\n    {\n        if(element.rating >= similarityPercent)\n            closestMatchest.push(element);\n    })\n    console.log(closestMatchest)\n    \n\n    // var innerJoin = closestMatchest.filter(element.taget => Items.includes(element));\n    return Items;\n}"]},"metadata":{},"sourceType":"module"}
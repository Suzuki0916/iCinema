{"ast":null,"code":"'use strict';\n/*!\n * Module dependencies.\n */\n\nvar Decimal = require('./types/decimal128');\n\nvar ObjectId = require('./types/objectid');\n\nvar PromiseProvider = require('./promise_provider');\n\nvar cloneRegExp = require('regexp-clone');\n\nvar get = require('./helpers/get');\n\nvar sliced = require('sliced');\n\nvar mpath = require('mpath');\n\nvar ms = require('ms');\n\nvar symbols = require('./helpers/symbols');\n\nvar Buffer = require('safe-buffer').Buffer;\n\nvar emittedSymbol = Symbol.for('mongoose:emitted');\nvar MongooseBuffer;\nvar MongooseArray;\nvar Document;\nvar specialProperties = new Set(['__proto__', 'constructor', 'prototype']);\nexports.specialProperties = specialProperties;\n/*!\n * Produces a collection name from model `name`. By default, just returns\n * the model name\n *\n * @param {String} name a model name\n * @param {Function} pluralize function that pluralizes the collection name\n * @return {String} a collection name\n * @api private\n */\n\nexports.toCollectionName = function (name, pluralize) {\n  if (name === 'system.profile') {\n    return name;\n  }\n\n  if (name === 'system.indexes') {\n    return name;\n  }\n\n  if (typeof pluralize === 'function') {\n    return pluralize(name);\n  }\n\n  return name;\n};\n/*!\n * Determines if `a` and `b` are deep equal.\n *\n * Modified from node/lib/assert.js\n *\n * @param {any} a a value to compare to `b`\n * @param {any} b a value to compare to `a`\n * @return {Boolean}\n * @api private\n */\n\n\nexports.deepEqual = function deepEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (a instanceof Date && b instanceof Date) {\n    return a.getTime() === b.getTime();\n  }\n\n  if (isBsonType(a, 'ObjectID') && isBsonType(b, 'ObjectID') || isBsonType(a, 'Decimal128') && isBsonType(b, 'Decimal128')) {\n    return a.toString() === b.toString();\n  }\n\n  if (a instanceof RegExp && b instanceof RegExp) {\n    return a.source === b.source && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline && a.global === b.global;\n  }\n\n  if (typeof a !== 'object' && typeof b !== 'object') {\n    return a == b;\n  }\n\n  if (a === null || b === null || a === undefined || b === undefined) {\n    return false;\n  }\n\n  if (a.prototype !== b.prototype) {\n    return false;\n  } // Handle MongooseNumbers\n\n\n  if (a instanceof Number && b instanceof Number) {\n    return a.valueOf() === b.valueOf();\n  }\n\n  if (Buffer.isBuffer(a)) {\n    return exports.buffer.areEqual(a, b);\n  }\n\n  if (isMongooseObject(a)) {\n    a = a.toObject();\n  }\n\n  if (isMongooseObject(b)) {\n    b = b.toObject();\n  }\n\n  var ka;\n  var kb;\n  var key;\n  var i;\n\n  try {\n    ka = Object.keys(a);\n    kb = Object.keys(b);\n  } catch (e) {\n    // happens when one is a string literal and the other isn't\n    return false;\n  } // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n\n\n  if (ka.length !== kb.length) {\n    return false;\n  } // the same set of keys (although not necessarily the same order),\n\n\n  ka.sort();\n  kb.sort(); // ~~~cheap key test\n\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] !== kb[i]) {\n      return false;\n    }\n  } // equivalent values for every corresponding key, and\n  // ~~~possibly expensive deep test\n\n\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n\n    if (!deepEqual(a[key], b[key])) {\n      return false;\n    }\n  }\n\n  return true;\n};\n/*!\n * Get the bson type, if it exists\n */\n\n\nfunction isBsonType(obj, typename) {\n  return get(obj, '_bsontype', void 0) === typename;\n}\n/*!\n * Get the last element of an array\n */\n\n\nexports.last = function (arr) {\n  if (arr.length > 0) {\n    return arr[arr.length - 1];\n  }\n\n  return void 0;\n};\n/*!\n * Object clone with Mongoose natives support.\n *\n * If options.minimize is true, creates a minimal data object. Empty objects and undefined values will not be cloned. This makes the data payload sent to MongoDB as small as possible.\n *\n * Functions are never cloned.\n *\n * @param {Object} obj the object to clone\n * @param {Object} options\n * @param {Boolean} isArrayChild true if cloning immediately underneath an array. Special case for minimize.\n * @return {Object} the cloned object\n * @api private\n */\n\n\nexports.clone = function clone(obj, options, isArrayChild) {\n  if (obj == null) {\n    return obj;\n  }\n\n  if (Array.isArray(obj)) {\n    return cloneArray(obj, options);\n  }\n\n  if (isMongooseObject(obj)) {\n    if (options && options.json && typeof obj.toJSON === 'function') {\n      return obj.toJSON(options);\n    }\n\n    return obj.toObject(options);\n  }\n\n  if (obj.constructor) {\n    switch (exports.getFunctionName(obj.constructor)) {\n      case 'Object':\n        return cloneObject(obj, options, isArrayChild);\n\n      case 'Date':\n        return new obj.constructor(+obj);\n\n      case 'RegExp':\n        return cloneRegExp(obj);\n\n      default:\n        // ignore\n        break;\n    }\n  }\n\n  if (obj instanceof ObjectId) {\n    return new ObjectId(obj.id);\n  }\n\n  if (isBsonType(obj, 'Decimal128')) {\n    if (options && options.flattenDecimals) {\n      return obj.toJSON();\n    }\n\n    return Decimal.fromString(obj.toString());\n  }\n\n  if (!obj.constructor && exports.isObject(obj)) {\n    // object created with Object.create(null)\n    return cloneObject(obj, options, isArrayChild);\n  }\n\n  if (obj[symbols.schemaTypeSymbol]) {\n    return obj.clone();\n  }\n\n  if (obj.valueOf != null) {\n    return obj.valueOf();\n  }\n\n  return cloneObject(obj, options, isArrayChild);\n};\n\nvar clone = exports.clone;\n/*!\n * ignore\n */\n\nexports.promiseOrCallback = function promiseOrCallback(callback, fn, ee) {\n  if (typeof callback === 'function') {\n    return fn(function (error) {\n      if (error != null) {\n        if (ee != null && ee.listeners('error').length > 0 && !error[emittedSymbol]) {\n          error[emittedSymbol] = true;\n          ee.emit('error', error);\n        }\n\n        try {\n          callback(error);\n        } catch (error) {\n          return process.nextTick(function () {\n            throw error;\n          });\n        }\n\n        return;\n      }\n\n      callback.apply(this, arguments);\n    });\n  }\n\n  var Promise = PromiseProvider.get();\n  return new Promise(function (resolve, reject) {\n    fn(function (error, res) {\n      if (error != null) {\n        if (ee != null && ee.listeners('error').length > 0 && !error[emittedSymbol]) {\n          error[emittedSymbol] = true;\n          ee.emit('error', error);\n        }\n\n        return reject(error);\n      }\n\n      if (arguments.length > 2) {\n        return resolve(Array.prototype.slice.call(arguments, 1));\n      }\n\n      resolve(res);\n    });\n  });\n};\n/*!\n * ignore\n */\n\n\nfunction cloneObject(obj, options, isArrayChild) {\n  var minimize = options && options.minimize;\n  var ret = {};\n  var hasKeys;\n\n  for (var k in obj) {\n    if (specialProperties.has(k)) {\n      continue;\n    } // Don't pass `isArrayChild` down\n\n\n    var val = clone(obj[k], options);\n\n    if (!minimize || typeof val !== 'undefined') {\n      hasKeys || (hasKeys = true);\n      ret[k] = val;\n    }\n  }\n\n  return minimize && !isArrayChild ? hasKeys && ret : ret;\n}\n\nfunction cloneArray(arr, options) {\n  var ret = [];\n\n  for (var i = 0, l = arr.length; i < l; i++) {\n    ret.push(clone(arr[i], options, true));\n  }\n\n  return ret;\n}\n/*!\n * Shallow copies defaults into options.\n *\n * @param {Object} defaults\n * @param {Object} options\n * @return {Object} the merged object\n * @api private\n */\n\n\nexports.options = function (defaults, options) {\n  var keys = Object.keys(defaults);\n  var i = keys.length;\n  var k;\n  options = options || {};\n\n  while (i--) {\n    k = keys[i];\n\n    if (!(k in options)) {\n      options[k] = defaults[k];\n    }\n  }\n\n  return options;\n};\n/*!\n * Generates a random string\n *\n * @api private\n */\n\n\nexports.random = function () {\n  return Math.random().toString().substr(3);\n};\n/*!\n * Merges `from` into `to` without overwriting existing properties.\n *\n * @param {Object} to\n * @param {Object} from\n * @api private\n */\n\n\nexports.merge = function merge(to, from, options, path) {\n  options = options || {};\n  var keys = Object.keys(from);\n  var i = 0;\n  var len = keys.length;\n  var key;\n  path = path || '';\n  var omitNested = options.omitNested || {};\n\n  while (i < len) {\n    key = keys[i++];\n\n    if (options.omit && options.omit[key]) {\n      continue;\n    }\n\n    if (omitNested[path]) {\n      continue;\n    }\n\n    if (specialProperties.has(key)) {\n      continue;\n    }\n\n    if (to[key] == null) {\n      to[key] = from[key];\n    } else if (exports.isObject(from[key])) {\n      if (!exports.isObject(to[key])) {\n        to[key] = {};\n      }\n\n      if (from[key] != null) {\n        if (from[key].instanceOfSchema) {\n          to[key] = from[key].clone();\n          continue;\n        } else if (from[key] instanceof ObjectId) {\n          to[key] = new ObjectId(from[key]);\n          continue;\n        }\n      }\n\n      merge(to[key], from[key], options, path ? path + '.' + key : key);\n    } else if (options.overwrite) {\n      to[key] = from[key];\n    }\n  }\n};\n/*!\n * Applies toObject recursively.\n *\n * @param {Document|Array|Object} obj\n * @return {Object}\n * @api private\n */\n\n\nexports.toObject = function toObject(obj) {\n  Document || (Document = require('./document'));\n  var ret;\n\n  if (obj == null) {\n    return obj;\n  }\n\n  if (obj instanceof Document) {\n    return obj.toObject();\n  }\n\n  if (Array.isArray(obj)) {\n    ret = [];\n\n    for (var i = 0, len = obj.length; i < len; ++i) {\n      ret.push(toObject(obj[i]));\n    }\n\n    return ret;\n  }\n\n  if (exports.isPOJO(obj)) {\n    ret = {};\n\n    for (var k in obj) {\n      if (specialProperties.has(k)) {\n        continue;\n      }\n\n      ret[k] = toObject(obj[k]);\n    }\n\n    return ret;\n  }\n\n  return obj;\n};\n/*!\n * Determines if `arg` is an object.\n *\n * @param {Object|Array|String|Function|RegExp|any} arg\n * @api private\n * @return {Boolean}\n */\n\n\nexports.isObject = function (arg) {\n  if (Buffer.isBuffer(arg)) {\n    return true;\n  }\n\n  return Object.prototype.toString.call(arg) === '[object Object]';\n};\n/*!\n * Determines if `arg` is a plain old JavaScript object (POJO). Specifically,\n * `arg` must be an object but not an instance of any special class, like String,\n * ObjectId, etc.\n *\n * `Object.getPrototypeOf()` is part of ES5: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\n *\n * @param {Object|Array|String|Function|RegExp|any} arg\n * @api private\n * @return {Boolean}\n */\n\n\nexports.isPOJO = function (arg) {\n  if (arg == null || typeof arg !== 'object') {\n    return false;\n  }\n\n  var proto = Object.getPrototypeOf(arg); // Prototype may be null if you used `Object.create(null)`\n  // Checking `proto`'s constructor is safe because `getPrototypeOf()`\n  // explicitly crosses the boundary from object data to object metadata\n\n  return !proto || proto.constructor.name === 'Object';\n};\n/*!\n * A faster Array.prototype.slice.call(arguments) alternative\n * @api private\n */\n\n\nexports.args = sliced;\n/*!\n * process.nextTick helper.\n *\n * Wraps `callback` in a try/catch + nextTick.\n *\n * node-mongodb-native has a habit of state corruption when an error is immediately thrown from within a collection callback.\n *\n * @param {Function} callback\n * @api private\n */\n\nexports.tick = function tick(callback) {\n  if (typeof callback !== 'function') {\n    return;\n  }\n\n  return function () {\n    try {\n      callback.apply(this, arguments);\n    } catch (err) {\n      // only nextTick on err to get out of\n      // the event loop and avoid state corruption.\n      process.nextTick(function () {\n        throw err;\n      });\n    }\n  };\n};\n/*!\n * Returns if `v` is a mongoose object that has a `toObject()` method we can use.\n *\n * This is for compatibility with libs like Date.js which do foolish things to Natives.\n *\n * @param {any} v\n * @api private\n */\n\n\nexports.isMongooseObject = function (v) {\n  Document || (Document = require('./document'));\n  MongooseArray || (MongooseArray = require('./types').Array);\n  MongooseBuffer || (MongooseBuffer = require('./types').Buffer);\n\n  if (v == null) {\n    return false;\n  }\n\n  return v.$__ != null || // Document\n  v.isMongooseArray || // Array or Document Array\n  v.isMongooseBuffer || // Buffer\n  v.$isMongooseMap; // Map\n};\n\nvar isMongooseObject = exports.isMongooseObject;\n/*!\n * Converts `expires` options of index objects to `expiresAfterSeconds` options for MongoDB.\n *\n * @param {Object} object\n * @api private\n */\n\nexports.expires = function expires(object) {\n  if (!(object && object.constructor.name === 'Object')) {\n    return;\n  }\n\n  if (!('expires' in object)) {\n    return;\n  }\n\n  var when;\n\n  if (typeof object.expires !== 'string') {\n    when = object.expires;\n  } else {\n    when = Math.round(ms(object.expires) / 1000);\n  }\n\n  object.expireAfterSeconds = when;\n  delete object.expires;\n};\n/*!\n * Populate options constructor\n */\n\n\nfunction PopulateOptions(obj) {\n  this.path = obj.path;\n  this.match = obj.match;\n  this.select = obj.select;\n  this.options = obj.options;\n  this.model = obj.model;\n\n  if (typeof obj.subPopulate === 'object') {\n    this.populate = obj.subPopulate;\n  }\n\n  if (obj.justOne != null) {\n    this.justOne = obj.justOne;\n  }\n\n  if (obj.count != null) {\n    this.count = obj.count;\n  }\n\n  this._docs = {};\n} // make it compatible with utils.clone\n\n\nPopulateOptions.prototype.constructor = Object; // expose\n\nexports.PopulateOptions = PopulateOptions;\n/*!\n * populate helper\n */\n\nexports.populate = function populate(path, select, model, match, options, subPopulate, justOne, count) {\n  // The order of select/conditions args is opposite Model.find but\n  // necessary to keep backward compatibility (select could be\n  // an array, string, or object literal).\n  function makeSingles(arr) {\n    var ret = [];\n    arr.forEach(function (obj) {\n      if (/[\\s]/.test(obj.path)) {\n        var _paths = obj.path.split(' ');\n\n        _paths.forEach(function (p) {\n          var copy = Object.assign({}, obj);\n          copy.path = p;\n          ret.push(copy);\n        });\n      } else {\n        ret.push(obj);\n      }\n    });\n    return ret;\n  } // might have passed an object specifying all arguments\n\n\n  if (arguments.length === 1) {\n    if (path instanceof PopulateOptions) {\n      return [path];\n    }\n\n    if (Array.isArray(path)) {\n      var singles = makeSingles(path);\n      return singles.map(function (o) {\n        if (o.populate && !(o.match || o.options)) {\n          return exports.populate(o)[0];\n        } else {\n          return exports.populate(o)[0];\n        }\n      });\n    }\n\n    if (exports.isObject(path)) {\n      match = path.match;\n      options = path.options;\n      select = path.select;\n      model = path.model;\n      subPopulate = path.populate;\n      justOne = path.justOne;\n      path = path.path;\n      count = path.count;\n    }\n  } else if (typeof model === 'object') {\n    options = match;\n    match = model;\n    model = undefined;\n  }\n\n  if (typeof path !== 'string') {\n    throw new TypeError('utils.populate: invalid path. Expected string. Got typeof `' + typeof path + '`');\n  }\n\n  if (Array.isArray(subPopulate)) {\n    var _ret = [];\n    subPopulate.forEach(function (obj) {\n      if (/[\\s]/.test(obj.path)) {\n        var copy = Object.assign({}, obj);\n\n        var _paths2 = copy.path.split(' ');\n\n        _paths2.forEach(function (p) {\n          copy.path = p;\n\n          _ret.push(exports.populate(copy)[0]);\n        });\n      } else {\n        _ret.push(exports.populate(obj)[0]);\n      }\n    });\n    subPopulate = exports.populate(_ret);\n  } else if (typeof subPopulate === 'object') {\n    subPopulate = exports.populate(subPopulate);\n  }\n\n  var ret = [];\n  var paths = path.split(' ');\n  options = exports.clone(options);\n\n  for (var i = 0; i < paths.length; ++i) {\n    ret.push(new PopulateOptions({\n      path: paths[i],\n      select: select,\n      match: match,\n      options: options,\n      model: model,\n      subPopulate: subPopulate,\n      justOne: justOne,\n      count: count\n    }));\n  }\n\n  return ret;\n};\n/*!\n * Return the value of `obj` at the given `path`.\n *\n * @param {String} path\n * @param {Object} obj\n */\n\n\nexports.getValue = function (path, obj, map) {\n  return mpath.get(path, obj, '_doc', map);\n};\n/*!\n * Sets the value of `obj` at the given `path`.\n *\n * @param {String} path\n * @param {Anything} val\n * @param {Object} obj\n */\n\n\nexports.setValue = function (path, val, obj, map, _copying) {\n  mpath.set(path, val, obj, '_doc', map, _copying);\n};\n/*!\n * Returns an array of values from object `o`.\n *\n * @param {Object} o\n * @return {Array}\n * @private\n */\n\n\nexports.object = {};\n\nexports.object.vals = function vals(o) {\n  var keys = Object.keys(o);\n  var i = keys.length;\n  var ret = [];\n\n  while (i--) {\n    ret.push(o[keys[i]]);\n  }\n\n  return ret;\n};\n/*!\n * @see exports.options\n */\n\n\nexports.object.shallowCopy = exports.options;\n/*!\n * Safer helper for hasOwnProperty checks\n *\n * @param {Object} obj\n * @param {String} prop\n */\n\nvar hop = Object.prototype.hasOwnProperty;\n\nexports.object.hasOwnProperty = function (obj, prop) {\n  return hop.call(obj, prop);\n};\n/*!\n * Determine if `val` is null or undefined\n *\n * @return {Boolean}\n */\n\n\nexports.isNullOrUndefined = function (val) {\n  return val === null || val === undefined;\n};\n/*!\n * ignore\n */\n\n\nexports.array = {};\n/*!\n * Flattens an array.\n *\n * [ 1, [ 2, 3, [4] ]] -> [1,2,3,4]\n *\n * @param {Array} arr\n * @param {Function} [filter] If passed, will be invoked with each item in the array. If `filter` returns a falsey value, the item will not be included in the results.\n * @return {Array}\n * @private\n */\n\nexports.array.flatten = function flatten(arr, filter, ret) {\n  ret || (ret = []);\n  arr.forEach(function (item) {\n    if (Array.isArray(item)) {\n      flatten(item, filter, ret);\n    } else {\n      if (!filter || filter(item)) {\n        ret.push(item);\n      }\n    }\n  });\n  return ret;\n};\n/*!\n * Removes duplicate values from an array\n *\n * [1, 2, 3, 3, 5] => [1, 2, 3, 5]\n * [ ObjectId(\"550988ba0c19d57f697dc45e\"), ObjectId(\"550988ba0c19d57f697dc45e\") ]\n *    => [ObjectId(\"550988ba0c19d57f697dc45e\")]\n *\n * @param {Array} arr\n * @return {Array}\n * @private\n */\n\n\nexports.array.unique = function (arr) {\n  var primitives = {};\n  var ids = {};\n  var ret = [];\n  var length = arr.length;\n\n  for (var i = 0; i < length; ++i) {\n    if (typeof arr[i] === 'number' || typeof arr[i] === 'string' || arr[i] == null) {\n      if (primitives[arr[i]]) {\n        continue;\n      }\n\n      ret.push(arr[i]);\n      primitives[arr[i]] = true;\n    } else if (arr[i] instanceof ObjectId) {\n      if (ids[arr[i].toString()]) {\n        continue;\n      }\n\n      ret.push(arr[i]);\n      ids[arr[i].toString()] = true;\n    } else {\n      ret.push(arr[i]);\n    }\n  }\n\n  return ret;\n};\n/*!\n * Determines if two buffers are equal.\n *\n * @param {Buffer} a\n * @param {Object} b\n */\n\n\nexports.buffer = {};\n\nexports.buffer.areEqual = function (a, b) {\n  if (!Buffer.isBuffer(a)) {\n    return false;\n  }\n\n  if (!Buffer.isBuffer(b)) {\n    return false;\n  }\n\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  for (var i = 0, len = a.length; i < len; ++i) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nexports.getFunctionName = function (fn) {\n  if (fn.name) {\n    return fn.name;\n  }\n\n  return (fn.toString().trim().match(/^function\\s*([^\\s(]+)/) || [])[1];\n};\n/*!\n * Decorate buffers\n */\n\n\nexports.decorate = function (destination, source) {\n  for (var key in source) {\n    if (specialProperties.has(key)) {\n      continue;\n    }\n\n    destination[key] = source[key];\n  }\n};\n/**\n * merges to with a copy of from\n *\n * @param {Object} to\n * @param {Object} fromObj\n * @api private\n */\n\n\nexports.mergeClone = function (to, fromObj) {\n  if (isMongooseObject(fromObj)) {\n    fromObj = fromObj.toObject({\n      transform: false,\n      virtuals: false,\n      depopulate: true,\n      getters: false,\n      flattenDecimals: false\n    });\n  }\n\n  var keys = Object.keys(fromObj);\n  var len = keys.length;\n  var i = 0;\n  var key;\n\n  while (i < len) {\n    key = keys[i++];\n\n    if (specialProperties.has(key)) {\n      continue;\n    }\n\n    if (typeof to[key] === 'undefined') {\n      to[key] = exports.clone(fromObj[key], {\n        transform: false,\n        virtuals: false,\n        depopulate: true,\n        getters: false,\n        flattenDecimals: false\n      });\n    } else {\n      var val = fromObj[key];\n\n      if (val != null && val.valueOf && !(val instanceof Date)) {\n        val = val.valueOf();\n      }\n\n      if (exports.isObject(val)) {\n        var obj = val;\n\n        if (isMongooseObject(val) && !val.isMongooseBuffer) {\n          obj = obj.toObject({\n            transform: false,\n            virtuals: false,\n            depopulate: true,\n            getters: false,\n            flattenDecimals: false\n          });\n        }\n\n        if (val.isMongooseBuffer) {\n          obj = Buffer.from(obj);\n        }\n\n        exports.mergeClone(to[key], obj);\n      } else {\n        to[key] = exports.clone(val, {\n          flattenDecimals: false\n        });\n      }\n    }\n  }\n};\n/**\n * Executes a function on each element of an array (like _.each)\n *\n * @param {Array} arr\n * @param {Function} fn\n * @api private\n */\n\n\nexports.each = function (arr, fn) {\n  for (var i = 0; i < arr.length; ++i) {\n    fn(arr[i]);\n  }\n};\n/*!\n * ignore\n */\n\n\nexports.noop = function () {};","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { mediaQueryMapper } from './mq';\nimport mapNodesToColumns from './mapNodesToColumns';\n\nvar Columns = function (_Component) {\n  _inherits(Columns, _Component);\n\n  function Columns(props) {\n    _classCallCheck(this, Columns);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.setColumns = _this.setColumns.bind(_this);\n    _this.state = {};\n    return _this;\n  }\n\n  Columns.prototype.componentDidMount = function componentDidMount() {\n    this.updateColumns(this.props);\n  };\n\n  Columns.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var queriesChanged = this.props.queries !== nextProps.queries;\n    var columnsChanged = this.props.columns !== nextProps.columns;\n\n    if (queriesChanged || columnsChanged) {\n      this.updateColumns(nextProps);\n    }\n  };\n\n  Columns.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.removeColumnListeners();\n  };\n\n  Columns.prototype.updateColumns = function updateColumns(props) {\n    if (props.queries.length) {\n      this.removeColumnListeners();\n      this._columns = mediaQueryMapper({\n        queries: props.queries,\n        valueKey: 'columns',\n        defaultValue: props.queries.length ? 1 : props.columns,\n        onChange: this.setColumns\n      });\n      this.setColumns();\n    }\n  };\n\n  Columns.prototype.setColumns = function setColumns() {\n    var _this2 = this;\n\n    this.setState(function () {\n      return {\n        columns: _this2._columns.getValue()\n      };\n    });\n  };\n\n  Columns.prototype.removeColumnListeners = function removeColumnListeners() {\n    if (this._columns) {\n      this._columns.removeListeners();\n    }\n  };\n\n  Columns.prototype.renderColumns = function renderColumns(columns) {\n    var _props = this.props,\n        children = _props.children,\n        dimensions = _props.dimensions,\n        gap = _props.gap;\n    var columnStyles = {\n      boxSizing: 'border-box',\n      float: 'left',\n      width: 1 / columns * 100 + '%',\n      paddingLeft: gap,\n      paddingRight: gap\n    };\n    var renderedColumns = children;\n\n    if (columns > 1) {\n      var columnsContainers = mapNodesToColumns({\n        children: children,\n        columns: columns,\n        dimensions: dimensions\n      });\n      renderedColumns = columnsContainers.map(function (column, i) {\n        return React.createElement('div', {\n          key: i,\n          style: columnStyles\n        }, column);\n      });\n    }\n\n    return renderedColumns;\n  };\n\n  Columns.prototype.render = function render() {\n    var _props2 = this.props,\n        className = _props2.className,\n        gap = _props2.gap,\n        rootStyles = _props2.rootStyles;\n    var _state$columns = this.state.columns,\n        columns = _state$columns === undefined ? this.props.columns : _state$columns;\n    var rowStyles = columns === 1 ? {} : {\n      marginLeft: 'calc(' + gap + ' * -1)',\n      marginRight: 'calc(' + gap + ' * -1)'\n    };\n    return React.createElement('div', {\n      className: className,\n      style: rootStyles\n    }, React.createElement('div', {\n      style: rowStyles\n    }, this.renderColumns(columns), React.createElement('div', {\n      style: {\n        clear: 'both'\n      }\n    })));\n  };\n\n  return Columns;\n}(Component);\n\nColumns.defaultProps = {\n  className: '',\n  rootStyles: {\n    overflowX: 'hidden'\n  },\n  queries: [],\n  columns: 3,\n  gap: '0px'\n};\nColumns.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  className: PropTypes.string,\n  rootStyles: PropTypes.object,\n  queries: PropTypes.array,\n  columns: PropTypes.number,\n  gap: PropTypes.string\n} : {};\nexport default Columns;","map":null,"metadata":{},"sourceType":"module"}
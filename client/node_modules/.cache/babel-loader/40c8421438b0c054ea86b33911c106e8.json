{"ast":null,"code":"'use strict';\n/*!\n * Module dependencies.\n */\n\nvar SchemaType = require('../schematype');\n\nvar CastError = SchemaType.CastError;\n\nvar MongooseError = require('../error');\n\nvar castString = require('../cast/string');\n\nvar utils = require('../utils');\n\nvar Document;\n/**\n * String SchemaType constructor.\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaString(key, options) {\n  this.enumValues = [];\n  this.regExp = null;\n  SchemaType.call(this, key, options, 'String');\n}\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\n\n\nSchemaString.schemaName = 'String';\n/*!\n * Inherits from SchemaType.\n */\n\nSchemaString.prototype = Object.create(SchemaType.prototype);\nSchemaString.prototype.constructor = SchemaString;\n/*!\n * ignore\n */\n\nSchemaString._cast = castString;\n/**\n * Get/set the function used to cast arbitrary values to strings.\n *\n * ####Example:\n *\n *     // Throw an error if you pass in an object. Normally, Mongoose allows\n *     // objects with custom `toString()` functions.\n *     const original = mongoose.Schema.Types.String.cast();\n *     mongoose.Schema.Types.String.cast(v => {\n *       assert.ok(v == null || typeof v !== 'object');\n *       return original(v);\n *     });\n *\n *     // Or disable casting entirely\n *     mongoose.Schema.Types.String.cast(false);\n *\n * @param {Function} caster\n * @return {Function}\n * @function get\n * @static\n * @api public\n */\n\nSchemaString.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n\n  if (caster === false) {\n    caster = function caster(v) {\n      if (v != null && typeof v !== 'string') {\n        throw new Error();\n      }\n\n      return v;\n    };\n  }\n\n  this._cast = caster;\n  return this._cast;\n};\n/**\n * Attaches a getter for all String instances.\n *\n * ####Example:\n *\n *     // Make all numbers round down\n *     mongoose.Schema.String.get(v => v.toLowerCase());\n *\n *     const Model = mongoose.model('Test', new Schema({ test: String }));\n *     new Model({ test: 'FOO' }).test; // 'foo'\n *\n * @param {Function} getter\n * @return {this}\n * @function get\n * @static\n * @api public\n */\n\n\nSchemaString.get = SchemaType.get;\n/*!\n * ignore\n */\n\nSchemaString._checkRequired = function (v) {\n  return (v instanceof String || typeof v === 'string') && v.length;\n};\n/**\n * Override the function the required validator uses to check whether a string\n * passes the `required` check.\n *\n * ####Example:\n *\n *     // Allow empty strings to pass `required` check\n *     mongoose.Schema.Types.String.checkRequired(v => v != null);\n *\n *     const M = mongoose.model({ str: { type: String, required: true } });\n *     new M({ str: '' }).validateSync(); // `null`, validation passes!\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\n\nSchemaString.checkRequired = SchemaType.checkRequired;\n/**\n * Adds an enum validator\n *\n * ####Example:\n *\n *     var states = ['opening', 'open', 'closing', 'closed']\n *     var s = new Schema({ state: { type: String, enum: states }})\n *     var M = db.model('M', s)\n *     var m = new M({ state: 'invalid' })\n *     m.save(function (err) {\n *       console.error(String(err)) // ValidationError: `invalid` is not a valid enum value for path `state`.\n *       m.state = 'open'\n *       m.save(callback) // success\n *     })\n *\n *     // or with custom error messages\n *     var enum = {\n *       values: ['opening', 'open', 'closing', 'closed'],\n *       message: 'enum validator failed for path `{PATH}` with value `{VALUE}`'\n *     }\n *     var s = new Schema({ state: { type: String, enum: enum })\n *     var M = db.model('M', s)\n *     var m = new M({ state: 'invalid' })\n *     m.save(function (err) {\n *       console.error(String(err)) // ValidationError: enum validator failed for path `state` with value `invalid`\n *       m.state = 'open'\n *       m.save(callback) // success\n *     })\n *\n * @param {String|Object} [args...] enumeration values\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaString.prototype.enum = function () {\n  if (this.enumValidator) {\n    this.validators = this.validators.filter(function (v) {\n      return v.validator !== this.enumValidator;\n    }, this);\n    this.enumValidator = false;\n  }\n\n  if (arguments[0] === void 0 || arguments[0] === false) {\n    return this;\n  }\n\n  var values;\n  var errorMessage;\n\n  if (utils.isObject(arguments[0])) {\n    values = arguments[0].values;\n    errorMessage = arguments[0].message;\n  } else {\n    values = arguments;\n    errorMessage = MongooseError.messages.String.enum;\n  }\n\n  for (var i = 0; i < values.length; i++) {\n    if (undefined !== values[i]) {\n      this.enumValues.push(this.cast(values[i]));\n    }\n  }\n\n  var vals = this.enumValues;\n\n  this.enumValidator = function (v) {\n    return undefined === v || ~vals.indexOf(v);\n  };\n\n  this.validators.push({\n    validator: this.enumValidator,\n    message: errorMessage,\n    type: 'enum',\n    enumValues: vals\n  });\n  return this;\n};\n/**\n * Adds a lowercase [setter](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set).\n *\n * ####Example:\n *\n *     var s = new Schema({ email: { type: String, lowercase: true }})\n *     var M = db.model('M', s);\n *     var m = new M({ email: 'SomeEmail@example.COM' });\n *     console.log(m.email) // someemail@example.com\n *     M.find({ email: 'SomeEmail@example.com' }); // Queries by 'someemail@example.com'\n *\n * @api public\n * @return {SchemaType} this\n */\n\n\nSchemaString.prototype.lowercase = function (shouldApply) {\n  if (arguments.length > 0 && !shouldApply) {\n    return this;\n  }\n\n  return this.set(function (v, self) {\n    if (typeof v !== 'string') {\n      v = self.cast(v);\n    }\n\n    if (v) {\n      return v.toLowerCase();\n    }\n\n    return v;\n  });\n};\n/**\n * Adds an uppercase [setter](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set).\n *\n * ####Example:\n *\n *     var s = new Schema({ caps: { type: String, uppercase: true }})\n *     var M = db.model('M', s);\n *     var m = new M({ caps: 'an example' });\n *     console.log(m.caps) // AN EXAMPLE\n *     M.find({ caps: 'an example' }) // Matches documents where caps = 'AN EXAMPLE'\n *\n * @api public\n * @return {SchemaType} this\n */\n\n\nSchemaString.prototype.uppercase = function (shouldApply) {\n  if (arguments.length > 0 && !shouldApply) {\n    return this;\n  }\n\n  return this.set(function (v, self) {\n    if (typeof v !== 'string') {\n      v = self.cast(v);\n    }\n\n    if (v) {\n      return v.toUpperCase();\n    }\n\n    return v;\n  });\n};\n/**\n * Adds a trim [setter](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set).\n *\n * The string value will be trimmed when set.\n *\n * ####Example:\n *\n *     var s = new Schema({ name: { type: String, trim: true }})\n *     var M = db.model('M', s)\n *     var string = ' some name '\n *     console.log(string.length) // 11\n *     var m = new M({ name: string })\n *     console.log(m.name.length) // 9\n *\n * @api public\n * @return {SchemaType} this\n */\n\n\nSchemaString.prototype.trim = function (shouldTrim) {\n  if (arguments.length > 0 && !shouldTrim) {\n    return this;\n  }\n\n  return this.set(function (v, self) {\n    if (typeof v !== 'string') {\n      v = self.cast(v);\n    }\n\n    if (v) {\n      return v.trim();\n    }\n\n    return v;\n  });\n};\n/**\n * Sets a minimum length validator.\n *\n * ####Example:\n *\n *     var schema = new Schema({ postalCode: { type: String, minlength: 5 })\n *     var Address = db.model('Address', schema)\n *     var address = new Address({ postalCode: '9512' })\n *     address.save(function (err) {\n *       console.error(err) // validator error\n *       address.postalCode = '95125';\n *       address.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MINLENGTH} token which will be replaced with the minimum allowed length\n *     var minlength = [5, 'The value of path `{PATH}` (`{VALUE}`) is shorter than the minimum allowed length ({MINLENGTH}).'];\n *     var schema = new Schema({ postalCode: { type: String, minlength: minlength })\n *     var Address = mongoose.model('Address', schema);\n *     var address = new Address({ postalCode: '9512' });\n *     address.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `postalCode` (`9512`) is shorter than the minimum length (5).\n *     })\n *\n * @param {Number} value minimum string length\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\n\nSchemaString.prototype.minlength = function (value, message) {\n  if (this.minlengthValidator) {\n    this.validators = this.validators.filter(function (v) {\n      return v.validator !== this.minlengthValidator;\n    }, this);\n  }\n\n  if (value !== null && value !== undefined) {\n    var msg = message || MongooseError.messages.String.minlength;\n    msg = msg.replace(/{MINLENGTH}/, value);\n    this.validators.push({\n      validator: this.minlengthValidator = function (v) {\n        return v === null || v.length >= value;\n      },\n      message: msg,\n      type: 'minlength',\n      minlength: value\n    });\n  }\n\n  return this;\n};\n/**\n * Sets a maximum length validator.\n *\n * ####Example:\n *\n *     var schema = new Schema({ postalCode: { type: String, maxlength: 9 })\n *     var Address = db.model('Address', schema)\n *     var address = new Address({ postalCode: '9512512345' })\n *     address.save(function (err) {\n *       console.error(err) // validator error\n *       address.postalCode = '95125';\n *       address.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MAXLENGTH} token which will be replaced with the maximum allowed length\n *     var maxlength = [9, 'The value of path `{PATH}` (`{VALUE}`) exceeds the maximum allowed length ({MAXLENGTH}).'];\n *     var schema = new Schema({ postalCode: { type: String, maxlength: maxlength })\n *     var Address = mongoose.model('Address', schema);\n *     var address = new Address({ postalCode: '9512512345' });\n *     address.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `postalCode` (`9512512345`) exceeds the maximum allowed length (9).\n *     })\n *\n * @param {Number} value maximum string length\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\n\nSchemaString.prototype.maxlength = function (value, message) {\n  if (this.maxlengthValidator) {\n    this.validators = this.validators.filter(function (v) {\n      return v.validator !== this.maxlengthValidator;\n    }, this);\n  }\n\n  if (value !== null && value !== undefined) {\n    var msg = message || MongooseError.messages.String.maxlength;\n    msg = msg.replace(/{MAXLENGTH}/, value);\n    this.validators.push({\n      validator: this.maxlengthValidator = function (v) {\n        return v === null || v.length <= value;\n      },\n      message: msg,\n      type: 'maxlength',\n      maxlength: value\n    });\n  }\n\n  return this;\n};\n/**\n * Sets a regexp validator.\n *\n * Any value that does not pass `regExp`.test(val) will fail validation.\n *\n * ####Example:\n *\n *     var s = new Schema({ name: { type: String, match: /^a/ }})\n *     var M = db.model('M', s)\n *     var m = new M({ name: 'I am invalid' })\n *     m.validate(function (err) {\n *       console.error(String(err)) // \"ValidationError: Path `name` is invalid (I am invalid).\"\n *       m.name = 'apples'\n *       m.validate(function (err) {\n *         assert.ok(err) // success\n *       })\n *     })\n *\n *     // using a custom error message\n *     var match = [ /\\.html$/, \"That file doesn't end in .html ({VALUE})\" ];\n *     var s = new Schema({ file: { type: String, match: match }})\n *     var M = db.model('M', s);\n *     var m = new M({ file: 'invalid' });\n *     m.validate(function (err) {\n *       console.log(String(err)) // \"ValidationError: That file doesn't end in .html (invalid)\"\n *     })\n *\n * Empty strings, `undefined`, and `null` values always pass the match validator. If you require these values, enable the `required` validator also.\n *\n *     var s = new Schema({ name: { type: String, match: /^a/, required: true }})\n *\n * @param {RegExp} regExp regular expression to test against\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\n\nSchemaString.prototype.match = function match(regExp, message) {\n  // yes, we allow multiple match validators\n  var msg = message || MongooseError.messages.String.match;\n\n  var matchValidator = function matchValidator(v) {\n    if (!regExp) {\n      return false;\n    }\n\n    var ret = v != null && v !== '' ? regExp.test(v) : true;\n    return ret;\n  };\n\n  this.validators.push({\n    validator: matchValidator,\n    message: msg,\n    type: 'regexp',\n    regexp: regExp\n  });\n  return this;\n};\n/**\n * Check if the given value satisfies the `required` validator. The value is\n * considered valid if it is a string (that is, not `null` or `undefined`) and\n * has positive length. The `required` validator **will** fail for empty\n * strings.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\n\nSchemaString.prototype.checkRequired = function checkRequired(value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return !!value;\n  } // `require('util').inherits()` does **not** copy static properties, and\n  // plugins like mongoose-float use `inherits()` for pre-ES6.\n\n\n  var _checkRequired = typeof this.constructor.checkRequired == 'function' ? this.constructor.checkRequired() : SchemaString.checkRequired();\n\n  return _checkRequired(value);\n};\n/**\n * Casts to String\n *\n * @api private\n */\n\n\nSchemaString.prototype.cast = function (value, doc, init) {\n  if (SchemaType._isRef(this, value, doc, init)) {\n    // wait! we may need to cast this to a document\n    if (value === null || value === undefined) {\n      return value;\n    } // lazy load\n\n\n    Document || (Document = require('./../document'));\n\n    if (value instanceof Document) {\n      value.$__.wasPopulated = true;\n      return value;\n    } // setting a populated path\n\n\n    if (typeof value === 'string') {\n      return value;\n    } else if (Buffer.isBuffer(value) || !utils.isObject(value)) {\n      throw new CastError('string', value, this.path);\n    } // Handle the case where user directly sets a populated\n    // path to a plain object; cast to the Model used in\n    // the population query.\n\n\n    var path = doc.$__fullPath(this.path);\n    var owner = doc.ownerDocument ? doc.ownerDocument() : doc;\n    var pop = owner.populated(path, true);\n    var ret = new pop.options.model(value);\n    ret.$__.wasPopulated = true;\n    return ret;\n  }\n\n  var castString = typeof this.constructor.cast === 'function' ? this.constructor.cast() : SchemaString.cast();\n\n  try {\n    return castString(value);\n  } catch (error) {\n    throw new CastError('string', value, this.path);\n  }\n};\n/*!\n * ignore\n */\n\n\nfunction handleSingle(val) {\n  return this.castForQuery(val);\n}\n\nfunction handleArray(val) {\n  var _this = this;\n\n  if (!Array.isArray(val)) {\n    return [this.castForQuery(val)];\n  }\n\n  return val.map(function (m) {\n    return _this.castForQuery(m);\n  });\n}\n\nSchemaString.prototype.$conditionalHandlers = utils.options(SchemaType.prototype.$conditionalHandlers, {\n  $all: handleArray,\n  $gt: handleSingle,\n  $gte: handleSingle,\n  $lt: handleSingle,\n  $lte: handleSingle,\n  $options: handleSingle,\n  $regex: handleSingle,\n  $not: handleSingle\n});\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} [val]\n * @api private\n */\n\nSchemaString.prototype.castForQuery = function ($conditional, val) {\n  var handler;\n\n  if (arguments.length === 2) {\n    handler = this.$conditionalHandlers[$conditional];\n\n    if (!handler) {\n      throw new Error('Can\\'t use ' + $conditional + ' with String.');\n    }\n\n    return handler.call(this, val);\n  }\n\n  val = $conditional;\n\n  if (Object.prototype.toString.call(val) === '[object RegExp]') {\n    return val;\n  }\n\n  return this._castForQuery(val);\n};\n/*!\n * Module exports.\n */\n\n\nmodule.exports = SchemaString;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n/*!\n * Module dependencies\n */\n\nvar checkEmbeddedDiscriminatorKeyProjection = require('./helpers/discriminator/checkEmbeddedDiscriminatorKeyProjection');\n\nvar get = require('./helpers/get');\n\nvar isDefiningProjection = require('./helpers/projection/isDefiningProjection');\n\nvar utils = require('./utils');\n/*!\n * Prepare a set of path options for query population.\n *\n * @param {Query} query\n * @param {Object} options\n * @return {Array}\n */\n\n\nexports.preparePopulationOptions = function preparePopulationOptions(query, options) {\n  var pop = utils.object.vals(query.options.populate); // lean options should trickle through all queries\n\n  if (options.lean != null) {\n    pop.filter(function (p) {\n      return get(p, 'options.lean') == null;\n    }).forEach(makeLean(options.lean));\n  }\n\n  return pop;\n};\n/*!\n * Prepare a set of path options for query population. This is the MongooseQuery\n * version\n *\n * @param {Query} query\n * @param {Object} options\n * @return {Array}\n */\n\n\nexports.preparePopulationOptionsMQ = function preparePopulationOptionsMQ(query, options) {\n  var pop = utils.object.vals(query._mongooseOptions.populate); // lean options should trickle through all queries\n\n  if (options.lean != null) {\n    pop.filter(function (p) {\n      return get(p, 'options.lean') == null;\n    }).forEach(makeLean(options.lean));\n  }\n\n  var session = get(query, 'options.session', null);\n\n  if (session != null) {\n    pop.forEach(function (path) {\n      if (path.options == null) {\n        path.options = {\n          session: session\n        };\n        return;\n      }\n\n      if (!('session' in path.options)) {\n        path.options.session = session;\n      }\n    });\n  }\n\n  var projection = query._fieldsForExec();\n\n  pop.forEach(function (p) {\n    p._queryProjection = projection;\n  });\n  return pop;\n};\n/*!\n * returns discriminator by discriminatorMapping.value\n *\n * @param {Model} model\n * @param {string} value\n */\n\n\nfunction getDiscriminatorByValue(model, value) {\n  var discriminator = null;\n\n  if (!model.discriminators) {\n    return discriminator;\n  }\n\n  for (var name in model.discriminators) {\n    var it = model.discriminators[name];\n\n    if (it.schema && it.schema.discriminatorMapping && it.schema.discriminatorMapping.value == value) {\n      discriminator = it;\n      break;\n    }\n  }\n\n  return discriminator;\n}\n\nexports.getDiscriminatorByValue = getDiscriminatorByValue;\n/*!\n * If the document is a mapped discriminator type, it returns a model instance for that type, otherwise,\n * it returns an instance of the given model.\n *\n * @param {Model}  model\n * @param {Object} doc\n * @param {Object} fields\n *\n * @return {Model}\n */\n\nexports.createModel = function createModel(model, doc, fields, userProvidedFields) {\n  model.hooks.execPreSync('createModel', doc);\n  var discriminatorMapping = model.schema ? model.schema.discriminatorMapping : null;\n  var key = discriminatorMapping && discriminatorMapping.isRoot ? discriminatorMapping.key : null;\n  var value = doc[key];\n\n  if (key && value && model.discriminators) {\n    var discriminator = model.discriminators[value] || getDiscriminatorByValue(model, value);\n\n    if (discriminator) {\n      var _fields = utils.clone(userProvidedFields);\n\n      exports.applyPaths(_fields, discriminator.schema);\n      return new discriminator(undefined, _fields, true);\n    }\n  }\n\n  return new model(undefined, fields, {\n    skipId: true,\n    isNew: false,\n    willInit: true\n  });\n};\n/*!\n * ignore\n */\n\n\nexports.applyPaths = function applyPaths(fields, schema) {\n  // determine if query is selecting or excluding fields\n  var exclude;\n  var keys;\n  var ki;\n  var field;\n\n  if (fields) {\n    keys = Object.keys(fields);\n    ki = keys.length;\n\n    while (ki--) {\n      if (keys[ki][0] === '+') {\n        continue;\n      }\n\n      field = fields[keys[ki]]; // Skip `$meta` and `$slice`\n\n      if (!isDefiningProjection(field)) {\n        continue;\n      }\n\n      exclude = field === 0;\n      break;\n    }\n  } // if selecting, apply default schematype select:true fields\n  // if excluding, apply schematype select:false fields\n\n\n  var selected = [];\n  var excluded = [];\n  var stack = [];\n\n  var analyzePath = function analyzePath(path, type) {\n    var plusPath = '+' + path;\n    var hasPlusPath = fields && plusPath in fields;\n\n    if (hasPlusPath) {\n      // forced inclusion\n      delete fields[plusPath];\n    }\n\n    if (typeof type.selected !== 'boolean') return;\n\n    if (hasPlusPath) {\n      // forced inclusion\n      delete fields[plusPath]; // if there are other fields being included, add this one\n      // if no other included fields, leave this out (implied inclusion)\n\n      if (exclude === false && keys.length > 1 && !~keys.indexOf(path)) {\n        fields[path] = 1;\n      }\n\n      return;\n    } // check for parent exclusions\n\n\n    var pieces = path.split('.');\n    var root = pieces[0];\n\n    if (~excluded.indexOf(root)) {\n      return;\n    } // Special case: if user has included a parent path of a discriminator key,\n    // don't explicitly project in the discriminator key because that will\n    // project out everything else under the parent path\n\n\n    if (!exclude && get(type, 'options.$skipDiscriminatorCheck', false)) {\n      var cur = '';\n\n      for (var i = 0; i < pieces.length; ++i) {\n        cur += (cur.length === 0 ? '' : '.') + pieces[i];\n        var projection = get(fields, cur, false);\n\n        if (projection && typeof projection !== 'object') {\n          return;\n        }\n      }\n    }\n\n    (type.selected ? selected : excluded).push(path);\n    return path;\n  };\n\n  analyzeSchema(schema);\n\n  switch (exclude) {\n    case true:\n      for (var i = 0; i < excluded.length; ++i) {\n        fields[excluded[i]] = 0;\n      }\n\n      break;\n\n    case false:\n      if (schema && schema.paths['_id'] && schema.paths['_id'].options && schema.paths['_id'].options.select === false) {\n        fields._id = 0;\n      }\n\n      for (var _i = 0; _i < selected.length; ++_i) {\n        fields[selected[_i]] = 1;\n      }\n\n      break;\n\n    case undefined:\n      if (fields == null) {\n        break;\n      } // Any leftover plus paths must in the schema, so delete them (gh-7017)\n\n\n      var _arr = Object.keys(fields || {});\n\n      for (var _i2 = 0; _i2 < _arr.length; _i2++) {\n        var key = _arr[_i2];\n\n        if (key.charAt(0) === '+') {\n          delete fields[key];\n        }\n      } // user didn't specify fields, implies returning all fields.\n      // only need to apply excluded fields and delete any plus paths\n\n\n      for (var _i3 = 0; _i3 < excluded.length; ++_i3) {\n        fields[excluded[_i3]] = 0;\n      }\n\n      break;\n  }\n\n  function analyzeSchema(schema, prefix) {\n    prefix || (prefix = ''); // avoid recursion\n\n    if (stack.indexOf(schema) !== -1) {\n      return [];\n    }\n\n    stack.push(schema);\n    var addedPaths = [];\n    schema.eachPath(function (path, type) {\n      if (prefix) path = prefix + '.' + path;\n      var addedPath = analyzePath(path, type);\n\n      if (addedPath != null) {\n        addedPaths.push(addedPath);\n      } // nested schemas\n\n\n      if (type.schema) {\n        var _addedPaths = analyzeSchema(type.schema, path); // Special case: if discriminator key is the only field that would\n        // be projected in, remove it.\n\n\n        if (exclude === false) {\n          checkEmbeddedDiscriminatorKeyProjection(fields, path, type.schema, selected, _addedPaths);\n        }\n      }\n    });\n    stack.pop();\n    return addedPaths;\n  }\n};\n/*!\n * Set each path query option to lean\n *\n * @param {Object} option\n */\n\n\nfunction makeLean(val) {\n  return function (option) {\n    option.options || (option.options = {});\n    option.options.lean = val;\n  };\n}\n/*!\n * Handle the `WriteOpResult` from the server\n */\n\n\nexports.handleDeleteWriteOpResult = function handleDeleteWriteOpResult(callback) {\n  return function _handleDeleteWriteOpResult(error, res) {\n    if (error) {\n      return callback(error);\n    }\n\n    var mongooseResult = Object.assign({}, res.result);\n\n    if (get(res, 'result.n', null) != null) {\n      mongooseResult.deletedCount = res.result.n;\n    }\n\n    if (res.deletedCount != null) {\n      mongooseResult.deletedCount = res.deletedCount;\n    }\n\n    return callback(null, mongooseResult);\n  };\n};","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import _defineProperty from \"/Users/miladarif/Desktop/React/movie-app/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/miladarif/Desktop/React/movie-app/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/Users/miladarif/Desktop/React/movie-app/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/miladarif/Desktop/React/movie-app/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/miladarif/Desktop/React/movie-app/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/miladarif/Desktop/React/movie-app/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/miladarif/Desktop/React/movie-app/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/miladarif/Desktop/React/movie-app/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/miladarif/Desktop/React/movie-app/client/src/components/movies.jsx\";\nimport React, { Component } from \"react\";\nimport _ from 'lodash';\nimport Pagination from './common/Pagination.jsx';\nimport paginate from '../Utils/paginate';\nimport MoviesTable from './moviesTable.jsx';\nimport Categories from \"./categories.jsx\";\nimport categorize from '../Utils/categorize';\nimport { Link } from 'react-router-dom';\nimport { SearchItem } from './common/search';\nimport Input from './common/input';\nimport { connect } from \"react-redux\";\nimport { GetMovies as _GetMovies } from '../actions/moviesAction';\nimport { GetGenres as _GetGenres } from '../actions/genreAction';\n\nvar Movies =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Movies, _Component);\n\n  function Movies() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Movies);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Movies)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      genres: [],\n      pageSize: 12,\n      currentPage: 1,\n      currentGenre: \"All\",\n      sortColumn: {\n        path: '',\n        order: ''\n      },\n      search: \"\",\n      searchFilter: \"title\"\n    };\n\n    _this.handleDelete = function (movie) {\n      var movies = _this.state.allMovies.filter(function (m) {\n        return m._id !== movie._id;\n      });\n\n      _this.setState({\n        allMovies: movies\n      });\n    };\n\n    _this.handlePageChange = function (page) {\n      _this.setState({\n        currentPage: page\n      });\n    };\n\n    _this.handleLike = function (movie) {\n      var movies = _toConsumableArray(_this.state.allMovies);\n\n      var index = movies.indexOf(movie);\n      movies[index] = _objectSpread({}, movies[index]);\n      movies[index].liked = !movies[index].liked;\n\n      _this.setState({\n        allMovies: movies\n      });\n    };\n\n    _this.handleSort = function (sortColumn) {\n      _this.setState({\n        sortColumn: sortColumn\n      });\n    };\n\n    _this.handleGenreChange = function (genre) {\n      _this.setState({\n        currentGenre: genre\n      });\n    };\n\n    _this.handleSearch = function (e) {\n      var _this$setState;\n\n      _this.setState((_this$setState = {}, _defineProperty(_this$setState, e.target.name, e.target.value), _defineProperty(_this$setState, \"currentPage\", 1), _this$setState));\n    };\n\n    return _this;\n  }\n\n  _createClass(Movies, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      //Get movies form MongoDB\n      this.props.GetMovies();\n      this.props.GetGenres();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          currentGenre = _this$state.currentGenre,\n          currentPage = _this$state.currentPage,\n          pageSize = _this$state.pageSize,\n          sortColumn = _this$state.sortColumn,\n          search = _this$state.search,\n          searchFilter = _this$state.searchFilter;\n      var movies = [];\n      var categorizedMovie = [];\n      var _this$props = this.props,\n          allMovies = _this$props.allMovies,\n          genres = _this$props.genres;\n      if (_.isEmpty(allMovies)) console.log(\"No Movies Yet\");else {\n        var searchedMovies;\n        /* Checking for searched item if nothing searched it will just set it to allMovies*/\n\n        searchedMovies = _.isEmpty(search) ? allMovies : SearchItem(search, allMovies, searchFilter); // search ? searchedMovies = SearchItem(search, allMovies, searchFilter) : searchedMovies = allMovies\n\n        categorizedMovie = categorize(searchedMovies, currentGenre);\n\n        var sortedMovies = _.orderBy(categorizedMovie, [sortColumn.path], [sortColumn.order]);\n\n        movies = paginate(sortedMovies, currentPage, pageSize);\n      }\n      return React.createElement(\"div\", {\n        className: \"background-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        className: \"text-muted text-left p-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, \"Filters\"), React.createElement(Categories, {\n        currentGenre: currentGenre,\n        onGenreChange: this.handleGenreChange,\n        allGenres: genres,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }), React.createElement(Link, {\n        to: \"/movies/new\",\n        className: \"btn blue btn-block my-2 text-white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \" Add Movie \")), React.createElement(\"div\", {\n        className: \"col-10\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(Input, {\n        name: \"search\",\n        onChange: this.handleSearch,\n        iconClass: \"fas fa-search\",\n        placeholder: \"Search...\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        className: \"text-left text-muted\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, \" \", movies ? \"\".concat(movies.length) : \"0\", \" items available.\"), React.createElement(\"div\", {\n        class: \"spinner-border text-danger\",\n        style: {\n          height: \"100px\"\n        },\n        role: \"status\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        style: {\n          height: \"100px\",\n          width: \"100px\"\n        },\n        class: \"sr-only\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, \"Loading...\")), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }), React.createElement(Pagination, {\n        itemsCount: categorizedMovie.length,\n        pageSize: this.state.pageSize,\n        onPageChange: this.handlePageChange,\n        currentPage: this.state.currentPage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      })))));\n    }\n  }]);\n\n  return Movies;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    allMovies: state.movie.movies,\n    genres: state.genre.genres\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    GetMovies: function GetMovies() {\n      return dispatch(_GetMovies());\n    },\n    GetGenres: function GetGenres() {\n      return dispatch(_GetGenres());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Movies);","map":{"version":3,"sources":["/Users/miladarif/Desktop/React/movie-app/client/src/components/movies.jsx"],"names":["React","Component","_","Pagination","paginate","MoviesTable","Categories","categorize","Link","SearchItem","Input","connect","GetMovies","GetGenres","Movies","state","genres","pageSize","currentPage","currentGenre","sortColumn","path","order","search","searchFilter","handleDelete","movie","movies","allMovies","filter","m","_id","setState","handlePageChange","page","handleLike","index","indexOf","liked","handleSort","handleGenreChange","genre","handleSearch","e","target","name","value","props","categorizedMovie","isEmpty","console","log","searchedMovies","sortedMovies","orderBy","length","height","width","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport _ from 'lodash';\nimport Pagination from './common/Pagination.jsx';\nimport paginate from '../Utils/paginate';\nimport MoviesTable from './moviesTable.jsx';\n\nimport Categories from \"./categories.jsx\";\nimport categorize from '../Utils/categorize';\nimport { Link } from 'react-router-dom';\nimport { SearchItem } from './common/search';\nimport Input from './common/input';\n\nimport { connect } from \"react-redux\";\nimport { GetMovies } from '../actions/moviesAction';\nimport { GetGenres } from '../actions/genreAction';\n\nclass Movies extends Component {\n\n  state = {\n    genres: [],\n    pageSize: 12,\n    currentPage: 1,\n    currentGenre: \"All\",\n    sortColumn: { path: '', order: ''},\n    search: \"\",\n    searchFilter:\"title\"\n  };\n\n  componentDidMount() {\n    //Get movies form MongoDB\n    this.props.GetMovies();\n    this.props.GetGenres();\n  }\n\n  handleDelete = movie => {\n    const movies = this.state.allMovies.filter(m => m._id !== movie._id);\n    this.setState({ allMovies:movies });\n  };\n\n  handlePageChange = (page) => {\n    this.setState({ currentPage: page });\n  }\n  \n  handleLike = movie => {  \n    const movies = [...this.state.allMovies];\n    const index = movies.indexOf(movie);\n    movies[index] = {...movies[index]};\n    movies[index].liked = !movies[index].liked;\n    this.setState({ allMovies: movies });\n  };\n\n  handleSort = sortColumn => {\n    this.setState({ sortColumn });\n  }\n\n  handleGenreChange = genre => {\n    this.setState({ currentGenre: genre });\n  }\n\n  handleSearch = (e) => {\n    this.setState({ [e.target.name] : e.target.value, currentPage:1 })\n  }\n  render() {\n    const { \n      currentGenre, \n      currentPage, \n      pageSize, \n      sortColumn,\n      search,\n      searchFilter\n    } = this.state;\n\n    let movies = [];\n    let categorizedMovie = [];\n    const { allMovies, genres } = this.props;\n\n    if(_.isEmpty(allMovies)) console.log(\"No Movies Yet\");\n    else {\n      let searchedMovies;\n      /* Checking for searched item if nothing searched it will just set it to allMovies*/\n      searchedMovies = _.isEmpty(search) ? allMovies : SearchItem(search, allMovies, searchFilter)\n      // search ? searchedMovies = SearchItem(search, allMovies, searchFilter) : searchedMovies = allMovies\n      \n      categorizedMovie = categorize(searchedMovies, currentGenre) \n      const sortedMovies = _.orderBy(categorizedMovie, [sortColumn.path], [sortColumn.order])\n      movies = paginate(sortedMovies, currentPage, pageSize);\n    }\n    \n    return (\n     <div className=\"background-container\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className='col-2'>\n              <h4 className=\"text-muted text-left p-1\">Filters</h4>\n              <Categories\n                currentGenre={currentGenre}\n                onGenreChange={this.handleGenreChange}\n                allGenres={genres}\n              />\n              <Link to=\"/movies/new\" className=\"btn blue btn-block my-2 text-white\"> Add Movie </Link>\n            </div>\n           \n            <div className=\"col-10\">\n              <Input \n                name=\"search\" \n                onChange={this.handleSearch} \n                iconClass=\"fas fa-search\"\n                placeholder=\"Search...\"\n              />\n              <p className=\"text-left text-muted\"> { movies ? `${movies.length}` : \"0\"} items available.</p>\n              {/* {\n                  movies.length > 0 ?\n                  <MoviesTable\n                    onDelete={this.handleDelete} \n                    onLike={this.handleLike}\n                    movies={movies}\n                    sortColumn={sortColumn}\n                    onSort={this.handleSort}\n                  />  : */}\n                  <div class=\"spinner-border text-danger\" style={{height:\"100px\"}} role=\"status\">\n                    <span style={{height:\"100px\",width: \"100px\"}} class=\"sr-only\">Loading...</span>\n                  </div>\n              {/* } */}\n              <br/>\n              <Pagination\n                itemsCount={categorizedMovie.length}\n                pageSize={this.state.pageSize}\n                onPageChange={this.handlePageChange}\n                currentPage={this.state.currentPage}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return { \n      allMovies: state.movie.movies,\n      genres: state.genre.genres\n  }\n}\nconst mapDispatchToProps = dispatch => {\n  return { \n      GetMovies: () => dispatch(GetMovies()),\n      GetGenres: () => dispatch(GetGenres())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps) (Movies);\n"]},"metadata":{},"sourceType":"module"}
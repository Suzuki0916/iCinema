{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/miladarif/Desktop/React/movie-app/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/miladarif/Desktop/React/movie-app/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/miladarif/Desktop/React/movie-app/client/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/miladarif/Desktop/React/movie-app/client/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/miladarif/Desktop/React/movie-app/client/node_modules/@babel/runtime/helpers/inherits\");\n\nvar Hoek = require('@hapi/hoek');\n\nvar Any = require('../any');\n\nvar internals = {};\n\ninternals.Lazy =\n/*#__PURE__*/\nfunction (_Any) {\n  _inherits(_class, _Any);\n\n  function _class() {\n    var _this;\n\n    _classCallCheck(this, _class);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(_class).call(this));\n    _this._type = 'lazy';\n    _this._flags.once = true;\n    _this._cache = null;\n    return _this;\n  }\n\n  _createClass(_class, [{\n    key: \"_init\",\n    value: function _init(fn, options) {\n      return this.set(fn, options);\n    }\n  }, {\n    key: \"_base\",\n    value: function _base(value, state, options) {\n      var schema;\n\n      if (this._cache) {\n        schema = this._cache;\n      } else {\n        var result = {\n          value: value\n        };\n        var lazy = this._flags.lazy;\n\n        if (!lazy) {\n          result.errors = this.createError('lazy.base', null, state, options);\n          return result;\n        }\n\n        schema = lazy();\n\n        if (!(schema instanceof Any)) {\n          result.errors = this.createError('lazy.schema', {\n            schema: schema\n          }, state, options);\n          return result;\n        }\n\n        if (this._flags.once) {\n          this._cache = schema;\n        }\n      }\n\n      return schema._validate(value, state, options);\n    }\n  }, {\n    key: \"set\",\n    value: function set(fn, options) {\n      Hoek.assert(typeof fn === 'function', 'You must provide a function as first argument');\n      Hoek.assert(options === undefined || options && typeof options === 'object' && !Array.isArray(options), \"Options must be an object\");\n\n      if (options) {\n        var unknownOptions = Object.keys(options).filter(function (key) {\n          return !['once'].includes(key);\n        });\n        Hoek.assert(unknownOptions.length === 0, \"Options contain unknown keys: \".concat(unknownOptions));\n        Hoek.assert(options.once === undefined || typeof options.once === 'boolean', 'Option \"once\" must be a boolean');\n      }\n\n      var obj = this.clone();\n      obj._flags.lazy = fn;\n\n      if (options && options.once !== obj._flags.once) {\n        obj._flags.once = options.once;\n      }\n\n      return obj;\n    }\n  }]);\n\n  return _class;\n}(Any);\n\nmodule.exports = new internals.Lazy();","map":null,"metadata":{},"sourceType":"script"}